---
title: "Final_lab_Ruvolo"
author: "Edoardo Ruvolo"
format: html
editor: visual
---

# Part 1

## Question 1 main data set import
```{r setup, include= FALSE}
here::i_am("bt_empire_Ruvolo.Rproj")
library(here)
library(vroom)
library(dplyr)
library(tidyr)
library(ggplot2)
library(knitr)
library(stringr)
theme_bw()
```

## Question 2 

Link to the [GitHub repository](https://github.com/Edrdrvl/bt_empire).

```{r}
# adjustment in the data loading.
BattleTech <- vroom(here("Data", "systems.csv"), na = "NA",
  col_types = cols(
    "Star_code" = col_double(),
    "star" = col_character(),
    "DISTANCE (LIGHTYEARS)" = col_double(),
    "Effective Temperature" = col_double(),
    "Relative Mass" = col_double(),
    "STAR RADIUS" = col_double(),
    "LUMINOSITY" = col_double(),
    "stellar type" = col_character(),
  ),
  locale = locale(decimal_mark = ",")
)
str(BattleTech)
```
## Question 3

Now i move to verify if the data have been uploaded correctly.
```{r}

# Verifying the numerical variables. 
numerical_variables <- c("Star_code", "DISTANCE (LIGHTYEARS)", "Effective Temperature", "Relative Mass", "STAR RADIUS","LUMINOSITY")
are_numerical <- sapply(BattleTech[numerical_variables], is.numeric)

# Expected number of variables and observation in my data set compared to the actual number of observation. 

expected_n_observation <- 1063
expected_n_variables <- 8
actual_n_observation <- nrow(BattleTech)
actual_n_variables <- ncol(BattleTech)

# Function to display the result in a message. 
if (all(are_numerical)) {
  message("All numerical variables are correctly recognized as numerical.")
} else {
  message("Some numerical variables are not recognized correctly.")
}

if ( actual_n_observation == expected_n_observation && actual_n_variables == expected_n_variables) {
  message("Data loaded successfully with the correct number of variables and observation.")
} else {
  message(
    "Data loading issue: Expected rows: ", expected_n_observation,
    ", Actual rows: ", actual_n_observation,
    "; Expected columns: ", expected_n_variables,
    ", Actual columns: ", actual_n_observation
  )
}
```

## Question 4 
In this one i created a table displaying the results. 
```{r}
# Number of missing values for each variable
miss_val <- sapply(BattleTech, function(x) sum(is.na(x)))

# Number of observations with at least one missing value
at_least_miss_val <- sum(apply(BattleTech, 1, function(x) any(is.na(x))))

#Creating a tab
Recap_tab <- data.frame(Metric = c(
    "Number of Observations", "Number of Variables",
    paste("Missing Values in '", names(miss_val), "'", sep = ""),
    "Observations with at Least One Missing Value"
  ),Value = c(actual_n_observation, actual_n_variables, miss_val, at_least_miss_val)
)

#Kable disp
kable(Recap_tab, format = "markdown", col.names = c("Metric", "Value"))

```

## Question 5 
```{r}
#Filtering and plotting the data
Filtered_Battletech1 <- BattleTech %>%
  filter(!is.na(`STAR RADIUS`) & !is.na(`Effective Temperature`))

ggplot(Filtered_Battletech1, aes(x = `STAR RADIUS`, y = `Effective Temperature`)) +
  geom_point() +
  labs(
    title = "Temperature of a star as a function of its radius",
    x = "Radius",
    y = "Temperature"
  )
```
## Question 6 
In this one i created a table that report in each variable, the table is very long because many variable have the same observations

```{r}
extremes <- function(df, variable) {
  max_row <- df %>%
    filter(.[[variable]] == max(.[[variable]], na.rm = TRUE)) %>%
    select(star, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Max")

  min_row <- df %>%
    filter(.[[variable]] == min(.[[variable]], na.rm = TRUE)) %>%
    select(star, Value = !!variable) %>%
    mutate(Variable = variable, Extremity = "Min")

  rbind(max_row, min_row)
}

extremes_distance <- extremes(BattleTech, "DISTANCE (LIGHTYEARS)")
extremes_temperature <- extremes(BattleTech, "Effective Temperature")
extremes_mass <- extremes(BattleTech, "Relative Mass")
extremes_radius <- extremes(BattleTech, "STAR RADIUS")
extremes_luminosity <- extremes(BattleTech, "LUMINOSITY")

extreme_tab <- rbind(extremes_distance, extremes_temperature, extremes_mass, extremes_radius, extremes_luminosity)

kable(extreme_tab, format = "markdown", col.names = c("Stars Name", "Value", "Variable", "Extremity"))
```
## Question 7

adding the new data sets
```{r}
THEFactions <- vroom(here("Data", "THE+FACTIONS.csv"),
  col_types = cols(
    "FACTION_KEY" = col_character(),
    "name of the faction" = col_character(),
    "FOUNDING YEAR" = col_double(),
    "Dissolution Year" = col_double(),
  ),
  locale = locale(decimal_mark = ",")
)
str(THEFactions)

Factionsystem <- vroom(here("Data", "FACTION-SYSTEM.csv"))
```
## Question 8-9 
In this question, i created a table that would present the number of abandoned star systems, independent systems (they are not controlled by any faction) and systems that are not yet discovered during year 2830.

```{r}
filtered_counts <- counts %>%
  filter(Subfaction %in% c('A', 'I', 'U'))
kable(filtered_counts, format = "markdown", col.names = c("Subfaction", "Value"))
```


